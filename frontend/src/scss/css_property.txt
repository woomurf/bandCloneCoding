해당 프로젝트에서 사용중인 CSS 설명

Color 표기 방식
    ! # 표기 > #000000
        # 이후 16진법 2자리수 연속 3번 사용
        2자리마다 빨강 초록 파랑 순
        3자리로만 표기 시 2번째 자리 생략된 걸로 판단
        ex)#FFF = #F0F0F0

    ! rgba 표기 > rgba(0, 0, 0, 1)
        r : 빨강(min,max - 0, 255)
        g : 초록(min,max - 0, 255)
        b : 파랑(min,max - 0, 255)
        a : 투명도(min,max - 0, 1)

Fonts
    ! font-family > 글꼴
    ! font-size > 글자크기
    ! font-weight > 글자두께
    ! line-height > 줄 높이(100% = 글자크기와 동일), 단위는 사용자 마음

margin
    ! 해당 객체 외부의 여백
        : 1px > 사방 1px
        : 1px 2px > 상하 1px 좌우 2px
        : 1px 2px 3px > 상 1px 좌우 2px 하 3px
        : 1px 2px 3px 4px > 상 1px 우 2px 하 3px 좌 4px
        auto 사용 시 중앙 정렬
    ! margin-(top, bottom, left, right) 사용 시
      한쪽의 외부 여백만 조절이 가능

padding
    ! 해당 객체 내부의 여백
        사용법 margin과 동일

border
    ! 해당 객체 외부와 내부 사이 테두리
        사용법은 인터넷 검색(아직 안씀)

display
    ! 객체를 어떤 방식으로 보여줄건지 결정하는 속성
        : none
            객체를 안보여줌(show/hide 대신 사용하기 적절)
            visibility속성은 객체를 투명하게 하는데 
            해당 속성은 영역도 차지하지 않음
        : block
            해당 속성을 가진 객체 또는 그룹은 해당 라인을 먹음
            해당 라인에 추가적인 객체 또는 그룹을 둘수없음
            width, height 속성으로 공간의 크기를 결정함
        : inline
            해당 속성은 block처럼 상하좌우 폭을 결정할 수 없다.
            글자나 문장에 효과를 줄 용도로 사용됨(글자 테두리, 형광펜같은..)
        : inline-block
            해당 속성은 inline과 block의 사이 속성으로
            해당 라인을 먹지않고 상하좌우 공간의 크기를 결정할 수 있음
        : flex
            해당 속성을 가진 객체 또는 그룹의 width에 따라 해당 세로축(다음 속성에 설명)을 먹음(default 기준)
            하지만 세로축은 CSS 속성으로 조절 가능하며 해당 축 하단에 새로운 객체나 그룹을 둘수있음
            사용법이 제일 직관적이고 편하게 쓸수있는 현재 제일 흔한 display 속성 값
        : grid
            대표적인 display 속성 중 대표적인 2차원 구조의 객체 정렬
            정말 여러가지 속성이 추가적으로 따라오는 속성 값이다. 
            잘 사용하면 본인이 생각하는대로 자유자체로 배치가 가능하지만,
            직접 사용해본적도 제대로 쓸 생각도 없으므로 궁금하면 검색해보자

    ! display: flex에 따라올 수 있는 속성값
        flex-direction
            ! flex로 묶인 그룹의 정렬 축을 정함
                : row(default)
                    가로축 정렬로 그룹 속 객체가 width에 따라 그 우측에 다음 객체가 붙음
                    ex) 객체가 좌측 벽부터 시작해서 객체의 우측에 달라붙음
                    별도 설정이 없으면  height는 display:block 의 속성의 width처럼 적용된다.
                : column
                    세로축 정렬로 그룹 속 객체가 height에 따라 그 하단에 다음 객체가 붙음
                    row의 세로 버젼
                : row-reverse
                    row 속성과 반대로 객체 우측 벽부터 시작해서 객체의 좌측에 달라붙음
                : column-reverse
                    column 속성과 반대

        flex-wrap
            ! flex로 묶인 그룹이 설정된 축의 공간을 가득 채웠을때 아이템의 줄바꿈을 어떻게 할것인가를 정함
                : nowrap(default)
                    그냥 공간이고 뭐고 다 뚫고 감(scrollbar를 만들어 디자인 가능)
                : wrap
                    평범하게 설정된 축의 다음 칸에 축을 만들어 이어서 진행
                    ex) row로 따지면 다음줄 생성
                : wrap-reverse
                    wrap의 반대로 이전 칸에 축을 만들어 진행
                    ex) row로 따지면 기존줄을 다음줄로 밀어내고 기존줄에 생성
        
        flex-flow
            ! 위 두개의 속성을 한번에 표기할 수 있게 해주는 속성
                : (direction속성 값) (wrap속성 값) 순서로 적음
        
        justify-content
            ! 메인축 방향 정렬방식, 설정된 메인축 기준으로 객체를 정렬함
                : flex-start(default)
                    축의 시작점으로 정렬
                : flex-end
                    축의 끝점으로 정렬
                : center
                    축의 가운데로 정렬
                : space-between
                    시작과 끝 사이로 객체의 균일한 "간격"을 만들어줌(양끝엔 객체가 붙어있음)
                : space-around
                    시작과 끝 사이로 객체의 균일한 "margin"을 만들어줌(양끝에도 객체가 떨어져있음)
                : space-evenly
                    space-between과 비슷하지만 양끝까지도 균일한 간격을 만들어줌

        align-items
            ! 메인축과 수직인 방향의 정렬방식
                : stretch(default)
                    수직축 방향으로 끝까지 늘린다.
                : flex-start
                    수직축의 시작점으로 정렬
                : flex-end
                    수직축의 끝점으로 정렬
                : center
                    수직축의 가운데로 정렬
                : baseline
                    객체 텍스트의 베이스라인(텍스트의 밑줄표기 시 나오는 라인) 기준으로 정렬
        
        align-content
            ! 메인축이 wrap 속성으로 인해 2개 이상의 축이 됐을때 정렬 방식
                : stretch(default)
                    수직축 방향으로 끝까지 늘린다.(row기준으로 축이 2개면 한축당 height: 50%)
                나머지 속성값은 justify-content의 속성과 같고, 
                축을 수직축으로 수정하면 설명또한 같다.
        
        flex-basis
            ! 객체의 메인축이 row 속성이면 width, column 속성이면 height의 기본크기를 설정한다.
                : auto(default)
                    해당 객체의 width값
                : content
                    해당 객체의 기본 점유크기
                : 사용자 설정값
                    해당 객체가 설정값을 넘어가면 그만큼 늘어나지만,
                    미리 width가 정해져있으면 늘어나지 않고 객체속 내용이 줄바꿈을 한다.

        그 외 flex-grow, flex-shrink 
        그리고 flex-basis, flex-grow, flex-shrink 속성을 한번에 사용할 수 있는
        flex 속성 등 몇개 있지만 아직 사용필요성을 못느낌

position
    ! 사용할 일이 거의 없음(대체 가능)
        : static > 정적 위치잡기(default)
            사용자가 주는 CSS에 따라 바뀜
        : relative > 상대 위치잡기
            객체에 margin을 주는것과 비슷
        : absolute > 절대 위치잡기
            프레임에서 벗어난 것처럼 따로 설정값을 줘야함(상단 고정같은 용도)

z-index
    ! 해당 객체의 z축을 조정할 수 있다.(default : 0)
      ex) CSS로 팝업 생성 시 앞에 나온 것처럼 구현 가능

================================= 이후부터는 그냥 눈에 보이는 항목 순으로 정리함

width
    ! 해당 객체의 가로 길이를 정한다. (display에 따라 사용가능 여부가 다르다.)

height
    ! 해당 객체의 세로 길이를 정한다. (display에 따라 사용가능 여부가 다르다.)

border-radius
    ! 해당 객체의 모서리를 둥근 정도를 정한다.(default : 0)

overflow
    ! 해당 객체의 컨텐츠가 너무 커서 조절해야할 경우 사용한다.
        : visible(default)
            객체보다 컨텐츠가 너무 크면 객체 밖으로 보여진다.
        : hidden
            밖으로 나가는 부분을 숨긴다.
        : scroll
            밖으로 보여주지 않고 스크롤바를 생성해준다.(가로, 세로 모두 추가)
        : auto 
            컨텐츠 량에 따라 스크롤바를 추가할지 자동으로 결정됩니다.(가로, 세로 별도로)

background-color
    ! 해당 객체의 배경 색을 정한다.

backdrop-filter
    ! 해당 객체 뒤 영역에 효과를 적용시킨다.(여러가지가 있지만 사용하게 된다면 다시 찾아보고적을예정)
        : blur( <length> )
        : brightness( <number-percentage> )
        : contrast( [ (en-US) <number-percentage> ] (en-US) )
        : drop-shadow( <length>{ (en-US)2,3} (en-US) <color>? (en-US) )
        : grayscale( <number-percentage> )
        : hue-rotate( <angle> )
        : invert( <number-percentage> )
        : opacity( [ (en-US) <number-percentage> ] (en-US) )
        : saturate( <number-percentage> )
        : sepia( <number-percentage> )

box-shadow
    ! 해당 객체에 그림자효과를 넣어준다.
        - 첫번째 값은 x축의 위치
        - 두번째 값은 y축의 위치
        - 세번쨰 값은 블러효과 생략 시 0 (0에 가까운 값일수록 선명한 그림자)
        - 네번째 값은 그림자의 크기를 결정하며 생략 시 0 (음수로 적을 시 객체보다 작고 양수면 반대)
        - 마지막 값은 그림자 컬러 및 투명도 (투명도 때문에 보통rgba값을 사용)

cursor
    ! 해당 객체에 마우스가 들어오면 마우스의 모양을 결정한다.
        마우스 모양 명명은 검색(정리 귀찮),,

outline-style
    ! 해당 객체의 테두리 디자인을 결정한다.
        해당 프로젝트는 테두리 NONE 원툴(추가적 디자인은 검색)

letter-spacing
    ! 해당 객체 속 글자의 자간(글자사이의 폭)을 결정한다.

opacity
    ! 해당 객체의 투명도를 결정한다.

top, bottom, left, right
    ! margin과 비슷한 용도로 position: absolute 사용 시 용이하게 쓰일 것같다. 